// Package cacheRestAPI Code generated by swaggo/swag. DO NOT EDIT
package cacheRestAPI

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/cache": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cache"
                ],
                "summary": "Get cache for a specific node ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "node_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "clusters",
                            "endpoints",
                            "routes",
                            "listeners",
                            "secrets"
                        ],
                        "type": "string",
                        "description": "Resource type",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetCacheResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "cache.Address": {
            "type": "object",
            "properties": {
                "bind": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            }
        },
        "cache.Cluster": {
            "type": "object",
            "properties": {
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cache.Endpoint"
                    }
                },
                "lb_policy": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "cache.Endpoint": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            }
        },
        "cache.Filter": {
            "type": "object",
            "properties": {
                "cluster": {
                    "type": "string"
                },
                "http_filters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "rds": {
                    "type": "string"
                },
                "route": {
                    "$ref": "#/definitions/cache.Route"
                },
                "stat_prefix": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "cache.FilterChain": {
            "type": "object",
            "properties": {
                "filter_chain_match": {
                    "$ref": "#/definitions/cache.FilterChainMatch"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cache.Filter"
                    }
                },
                "name": {
                    "type": "string"
                },
                "transport_socket": {
                    "$ref": "#/definitions/cache.TransportSocket"
                }
            }
        },
        "cache.FilterChainMatch": {
            "type": "object",
            "properties": {
                "domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "cache.Heades": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "cache.Listener": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/cache.Address"
                },
                "filter_chains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cache.FilterChain"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "cache.RequestsHeadersToAdd": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/cache.Heades"
                }
            }
        },
        "cache.Route": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "virtual_hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cache.VirtualHost"
                    }
                }
            }
        },
        "cache.Secret": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "cache.TransportSocket": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "cache.VirtualHost": {
            "type": "object",
            "properties": {
                "domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "requests_headers_to_adds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cache.RequestsHeadersToAdd"
                    }
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handlers.GetCacheResponse": {
            "type": "object",
            "properties": {
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cache.Cluster"
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cache.Endpoint"
                    }
                },
                "listeners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cache.Listener"
                    }
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cache.Route"
                    }
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cache.Secret"
                    }
                },
                "version": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Envoy XDS Cache Rest API",
	Description:      "This is a sample server for Envoy XDS Cache Rest API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
